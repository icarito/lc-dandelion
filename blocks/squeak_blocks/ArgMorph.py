import BorderedMorphclass ArgBlock(BorderedMorph):	'''	I am an abstract superclass for all kinds of argument morphs--morphs that 		are used to hold the argument for various kinds of BlockMorph.	'''	dropDownMenuForm = None	def __init__(self):		self.label = None		# in the smalltalk code there was something about a drop-down menu here			# Drawing methods	def drawHLineFrom_to_y_color_on_(self, startX, endX, yOffset, c, aCanvas):		y = self.top + yOffset		aCanvas.fillRectangle_corner_color_((self.left+startX, y), (self.left + endX, y+1), c)	# other methods		def acceptsDroppedReporters(self):		'''		Answer true if I accept dropped reporter blocks.  Answer false by default.		'''		return False	def acceptsTypeOf(self, aBlockMorph):		'''		Answer true if I can accept a dropped reporter of the given type. Answer false by default.		'''		return False    def defaultValue(self, anObject):        '''    	Set my default value. This default implementation does nothing.    	'''    	pass    def delete(self):    	ScratchFrameMorph putInClipboard: self.    	super(ArgMorph).delete(self)    def fixArgLayout(self):	    '''	    Fix my layout. This default implementation does nothing.	    '''	    pass    def isReporter(self):	    '''	    Answer true since every ArgMorph reports a value.	    '''	    return True    def labelMorph(self):	    return self.labelMorph	    	#  I/O methods    def __str__(self):        return str(self.labelMorph)