'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 30 April 2008 at 1:47:24 pm'!ArgMorph subclass: #ChoiceArgMorph	instanceVariableNames: 'menuIconMorph isBoolean options choice getOptionsSelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Blocks'!!ChoiceArgMorph commentStamp: 'jm 7/7/2004 00:28' prior: 0!I am used to represent an ArgMorph that allows the user to choose from a popup menu of choices. For example, I might allow selection of a sensor port from the list ('a', 'b', 'c', 'd').In an earlier version of Scratch, I was used to represent boolean values. That usage has been replaced with BooleanArgMorph.!!ChoiceArgMorph methodsFor: 'initialization' stamp: 'jm 6/22/2007 12:48'!initialize	super initialize.	self borderInset.	self borderWidth: 1.	self color: Color brown.	labelMorph _ StringMorph new font: BlockMorph argFont; color: Color white.	self addMorph: labelMorph.	menuIconMorph _ ImageMorph new form: DropDownMenuForm.	self addMorphFront: menuIconMorph.	isBoolean _ false.	options _ #(a b c d).	self choice: #a.! !!ChoiceArgMorph methodsFor: 'accessing' stamp: 'jm 8/24/2003 18:26'!choice	^ choice! !!ChoiceArgMorph methodsFor: 'accessing' stamp: 'jm 12/4/2007 15:37'!choice: aSymbol	"Update the toggle button when an argument is changed within a block."	| frame palette block doLocalization |	frame _ self ownerThatIsA: ScratchFrameMorph.	((#soundNames = getOptionsSelector) and:	 [aSymbol = ('record' localized, '...')]) ifTrue: [		frame ifNotNil: [^ frame newSound]].	choice _ aSymbol.	doLocalization _ (#(costumeNames soundNames) includes: getOptionsSelector) not.	doLocalization		ifTrue:[labelMorph contents: choice asString localized]		ifFalse:[labelMorph contents: choice asString].	labelMorph position: self position + borderWidth + (3 @ -1).	self extent: (labelMorph extent + (16@2) + borderWidth).	menuIconMorph position: (self right - borderWidth - 10)@(self top + borderWidth + 4).	(palette _ self ownerThatIsA: ScratchBlockPaletteMorph) ifNil: [^ self].	(block _ self ownerThatIsA: BlockMorph) ifNil: [^ self].	block isReporter ifTrue: [palette updateWatcherButtonsForFrame: frame].! !!ChoiceArgMorph methodsFor: 'accessing' stamp: 'jm 3/28/2005 15:13'!defaultValue: aString	"Set my default value."	self choice: aString.! !!ChoiceArgMorph methodsFor: 'accessing' stamp: 'jm 5/14/2004 11:50'!getOptionsSelector: aSymbolOrString	"Set a selector that is used to get a set of options from my command block's receiver. This is used when the options can change over time, such as selecting from a list of available sounds or costumes in the objects media library."	getOptionsSelector _ aSymbolOrString asSymbol.! !!ChoiceArgMorph methodsFor: 'accessing' stamp: 'jm 6/10/2004 10:49'!options	"Answer my set of options. If getOptionsSelector is not nil and I'm in a CommandBlock with a non-nil receiver, fetch my set of options by sending getOptionsSelector to that receiver."	(getOptionsSelector notNil and:	 [(owner respondsTo: #receiver) and:	 [owner receiver notNil]]) ifTrue: [		^ owner receiver perform: getOptionsSelector].	^ options! !!ChoiceArgMorph methodsFor: 'accessing' stamp: 'jm 8/24/2003 18:32'!options: stringList	options _ stringList asArray.	(options includes: choice) ifFalse: [self choice: options first].! !!ChoiceArgMorph methodsFor: 'accessing' stamp: 'jm 12/4/2007 15:43'!presentMenu	"Pop up a menu of choices."	| optionList doLocalization menu selection option |	optionList _ self options.	optionList size = 0 ifTrue: [^ self].	doLocalization _ (#(costumeNames soundNames) includes: getOptionsSelector) not.	menu _ CustomMenu new.	optionList do: [:sym |		'-' = sym			ifTrue: [menu addLine]			ifFalse: [				doLocalization					ifTrue: [option _ sym localized]					ifFalse: [option _ sym].				((#(hookupSensorNames hookupBooleanSensorNames) includes: getOptionsSelector) and:[					(#(connected resistance) includes: sym)])					ifTrue:[#(A B C D) do:[:c |						(self owner isBooleanReporter)							ifFalse:[menu add: (option,'-',c) action: (sym,'-',c)]							ifTrue:[menu add: (c,' ',option) action: (c,' ',sym)]]]					ifFalse:[menu add: option action: sym]]].	(selection _ menu startUp) ifNotNil: [self choice: selection].! !!ChoiceArgMorph methodsFor: 'event handling' stamp: 'jm 1/23/2007 12:32'!handlesMouseDown: evt	^ evt hand toolType isNil and:		[(self topRight - (14@0) corner: self bottomRight) containsPoint: evt cursorPoint]! !!ChoiceArgMorph methodsFor: 'event handling' stamp: 'jm 12/13/2006 21:35'!mouseDown: evt	self presentMenu.! !!ChoiceArgMorph methodsFor: 'event handling' stamp: 'jm 12/14/2004 11:51'!wantsKeyboardFocusFor: aSubmorph	"Don't allow shift-click editing of block labels."	^ false! !!ChoiceArgMorph methodsFor: 'other' stamp: 'jm 8/24/2003 18:33'!evaluate	"Answer my value."	isBoolean ifTrue: [^ 'true' = choice].	^ choice! !!ChoiceArgMorph methodsFor: 'other' stamp: 'jm 4/1/2005 20:33'!fixArgLayout	"Set my color to my owner's color."	self color: (owner color mixed: 0.75 with: (Color gray: 0.45)).! !!ChoiceArgMorph methodsFor: 'other' stamp: 'jm 10/30/2005 08:32'!printArgOn: aStream	"Print this argument morph on the given stream."	aStream nextPutAll: '"', self labelMorph contents, '"'.! !!ChoiceArgMorph methodsFor: 'object i/o' stamp: 'jm 5/14/2004 11:39'!fieldsVersion	^ 2! !!ChoiceArgMorph methodsFor: 'object i/o' stamp: 'jm 5/14/2004 11:54'!initFieldsFrom: anObjStream version: classVersion	super initFieldsFrom: anObjStream version: classVersion.	self initFieldsNamed: #(		isBoolean		options		choice	) from: anObjStream.	classVersion = 1 ifTrue: [^ self].	"fields added in version 2"	self initFieldsNamed: #(		getOptionsSelector	) from: anObjStream.! !!ChoiceArgMorph methodsFor: 'object i/o' stamp: 'jm 5/14/2004 11:54'!storeFieldsOn: anObjStream	super storeFieldsOn: anObjStream.	self storeFieldsNamed: #(		isBoolean		options		choice		getOptionsSelector	) on: anObjStream.! !