'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 30 April 2008 at 1:48:39 pm'!HatBlockMorph subclass: #WhenHatBlockMorph	instanceVariableNames: 'argMorph lastState '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Blocks'!!WhenHatBlockMorph methodsFor: 'initialization' stamp: 'jm 9/6/2006 15:54'!initialize	| s1 s2 |	super initialize.	argMorph _ BooleanArgMorph new.	lastState _ false.	s1 _ 'when' localized.	s2 _ 'is true' localized.	self removeAllMorphs.	self addMorphBack: ((StringMorph contents: s1 font: LabelFont) color: Color white).	self addMorphBack: argMorph.	self addMorphBack: ((StringMorph contents: s2 font: LabelFont) color: Color white).! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 7/19/2006 10:53'!argMorph	submorphs do: [:m |		(m isKindOf: ArgMorph) ifTrue: [^ m].		(m isKindOf: ReporterBlockMorph) ifTrue: [^ m]].	^ nil! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 8/31/2006 09:23'!argMorphToReplace: aMorph	"Answer a new argument morph to be used to replace the given morph."	aMorph ~= argMorph ifTrue: [^ nil].	^ BooleanArgMorph new! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 9/1/2006 12:38'!asBlockTuple	"Answer a tuple (Array) describing this block and its arguments."	| argTuple |	argTuple _ (argMorph isKindOf: ArgMorph)		ifTrue: [argMorph evaluate]		ifFalse: [argMorph asBlockTuple].	^ Array with: self class name with: argTuple! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 7/19/2006 10:56'!evaluateCondition	"Answer true if my condition is true."	| arg |	arg _ submorphs detect: [:m | m isKindOf: ReporterBlockMorph] ifNone: [^ false].	^ arg evaluate! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 11/28/2006 20:27'!fixBlockLayout	"Update the positions of my submorphs."	| x centerY nextB |	argMorph ifNil: [^ self].  "happens during initialization"	blockLayoutNeeded ifFalse: [^ self].	cachedForm _ nil.	cachedFeedbackForm _ nil.	((argMorph isKindOf: ArgMorph) and: [argMorph owner = self])		ifTrue: [argMorph fixArgLayout].	self height: 26 + argMorph height.	x _ self left + 8.	centerY _ bounds center y + 5.	self nonControlFlowSubmorphs do: [:m |		m position: x@(centerY - (m height // 2)).		x _ x + m width + 5].	self width: ((x + 4 - self left) max: self hatTopForm width).	(nextB _ self nextBlock) ifNotNil: [		nextB top: self bottom - 4.		nextB fixBlockLayout].! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'tis 10/8/2006 12:34'!helpScreenName	"Answer the name of the help screen for this hat block, or nil if no help is available."	^ 'whenHat'! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 8/31/2006 09:19'!nextBlock	"Answer the block following myself in the block sequence or nil if I am the last block in the sequence. Each block is a submorph of the previous block."	^ self submorphs		detect: [:m | (m isKindOf: BlockMorph) and: [m ~= argMorph]]		ifNone: [nil]! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 9/1/2006 11:16'!printHatNameOn: aStream	"Append a human-readable string for this hat block's name to the given stream."	aStream nextPutAll: 'when '.	self printCodeSubmorph: argMorph on: aStream.	aStream nextPutAll: ' becomes true'; cr.! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 8/31/2006 09:10'!replaceArgMorph: oldMorph by: newMorph	"Replace oldMorph with newMorph. This is done when dropping a reporter block onto my argument."	argMorph _ newMorph.	self replaceSubmorph: oldMorph by: newMorph.	self layoutChanged.! !!WhenHatBlockMorph methodsFor: 'other' stamp: 'jm 7/19/2006 10:33'!triggered	"Answer true if my condition has just become true."	| condition |	condition _ self evaluateCondition.	condition & lastState not ifTrue: [lastState _ true. ^ true].  "trigger on false->true transition"	lastState _ condition.	^ false! !