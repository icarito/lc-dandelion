'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 30 April 2008 at 1:48:06 pm'!BlockMorph subclass: #HatBlockMorph	instanceVariableNames: 'scriptNameMorph indicatorMorph scriptOwner parameters isClickable '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Blocks'!!HatBlockMorph commentStamp: 'jm 3/28/2005 12:25' prior: 0!I represent a script consisting of a sequence of blocks.!!HatBlockMorph methodsFor: 'initialization' stamp: 'jm 4/3/2005 22:39'!initialize	super initialize.	self color: (Color h: 41 s: 0.85 v: 0.9).	self extent: 92@38.	scriptOwner _ nil.	scriptNameMorph _ StringMorph new		contents: 'script';		font: LabelFont;		color: Color white.	self addMorph: scriptNameMorph.! !!HatBlockMorph methodsFor: 'accessing' stamp: 'jm 6/10/2004 10:47'!receiver	^ scriptOwner! !!HatBlockMorph methodsFor: 'accessing' stamp: 'jm 3/5/2003 16:52'!scriptOwner	^ scriptOwner! !!HatBlockMorph methodsFor: 'accessing' stamp: 'jm 7/2/2004 10:45'!scriptOwner: anObject	scriptOwner _ anObject.! !!HatBlockMorph methodsFor: 'drawing' stamp: 'jm 11/25/2005 08:59'!drawArchOn: aCanvas 	| archForm stretchX leftForm midForm rightForm y x |	archForm _ self hatTopForm.	stretchX _ archForm width - 22.	leftForm _ archForm copy: (0@0 corner: stretchX@archForm height).	midForm _ archForm copy: (stretchX@0 extent: 1@archForm height).	rightForm _ archForm copy: ((stretchX + 1)@0 corner: archForm extent).	y _ self top.	x _ self left.	aCanvas paintImage: leftForm at: x@y.	x _ x + leftForm width.	(self width - (leftForm width + rightForm width)) asInteger timesRepeat: [		aCanvas paintImage: midForm at: x@y.		x _ x + 1].	aCanvas paintImage: rightForm at: x@y.! !!HatBlockMorph methodsFor: 'drawing' stamp: 'jm 3/31/2005 22:03'!drawBodyOn: aCanvas 	| archBottom |	archBottom _ self top + self hatTopForm height.	self drawArchOn: aCanvas.	aCanvas		fillRectangle: (self left@archBottom corner: (self right - 1)@(self bottom - 7))		color: color.	aCanvas		fillRectangle: (self left@archBottom corner: (self left + 2)@(self bottom - 7))		color: highlightColor2.	aCanvas		fillRectangle: ((self right - 1)@(archBottom -  1) corner: self right@(self bottom - 7))		color: shadowColor.! !!HatBlockMorph methodsFor: 'drawing' stamp: 'jm 3/27/2005 13:55'!drawOn: aCanvas 	self computeHighlightColors.	self drawBodyOn: aCanvas.	self drawBottomEdgeOn: aCanvas.! !!HatBlockMorph methodsFor: 'event handling' stamp: 'jm 3/11/2004 14:36'!doubleClick: evt	"Run or stop my script."	self toggleProcess.! !!HatBlockMorph methodsFor: 'stepping' stamp: 'jm 11/28/2006 20:21'!step	"Update the color of my indicator to show my process state: stopped, running, or error."	super step.	scratchProc ifNotNil: [		(scratchProc readyToTerminate or:		 [scratchProc isTerminated]) ifTrue: [  "process terminated normally"			self stop]].! !!HatBlockMorph methodsFor: 'right button menu' stamp: 'jm 3/28/2005 12:28'!duplicate	"Overridden to pick an unused script name for the duplicate."	| m |	m _ self fullCopy.	scriptOwner ifNotNil: [m scriptOwner: scriptOwner].	self world activeHand attachMorph: m.! !!HatBlockMorph methodsFor: 'processes' stamp: 'jm 11/28/2006 20:07'!start	| stage |	self stop.	scratchProc ifNil: [		scriptOwner ifNil: [^ self].		(stage _ self receiver ownerThatIsA: ScratchStageMorph) ifNil: [^ self].		scratchProc _ stage startProcessForStatements: self blockSequence allButFirst.		self changed].! !!HatBlockMorph methodsFor: 'object i/o' stamp: 'jm 9/24/2003 19:07'!fieldsVersion	^ 1! !!HatBlockMorph methodsFor: 'object i/o' stamp: 'jm 3/28/2005 12:47'!initFieldsFrom: anObjStream version: classVersion	super initFieldsFrom: anObjStream version: classVersion.	self initFieldsNamed: #(		scriptNameMorph		indicatorMorph		scriptOwner		parameters		isClickable	) from: anObjStream.	parameters _ nil.  "procedures with parameters are no longer supported"	"remove the indicator morph when reading in an older project"	indicatorMorph ifNotNil: [		submorphs _ submorphs copyWithout: indicatorMorph.		indicatorMorph _ nil].! !!HatBlockMorph methodsFor: 'object i/o' stamp: 'jm 9/28/2003 18:16'!storeFieldsOn: anObjStream	super storeFieldsOn: anObjStream.	self storeFieldsNamed: #(		scriptNameMorph		indicatorMorph		scriptOwner		parameters		isClickable	) on: anObjStream.! !!HatBlockMorph methodsFor: 'private' stamp: 'ee 10/17/2007 13:49'!blockAttachPoints: aSet	"Answer a collection of possible attachment points for me. Each entry is an Association mapping a point to the morph to which a dropping block could be attached."	| nextB |	nextB _ self nextBlock.	nextB		ifNil: [aSet add: (self bottomLeft -> self)]		ifNotNil: [nextB blockAttachPoints: aSet].! !!HatBlockMorph methodsFor: 'private' stamp: 'jm 10/11/2006 17:35'!click: evt	evt hand toolType = 'CutTool' ifTrue: [		evt shiftPressed ifFalse: [evt hand toolType: nil].		(owner isKindOf: ScratchBlockPaletteMorph) ifTrue: [^ self].  "ignore if in palette"		ScratchFrameMorph putInClipboard: self.		^ self stop; delete].! !!HatBlockMorph methodsFor: 'private' stamp: 'jm 11/28/2006 19:27'!fixBlockLayout	"Update the positions of my submorphs."	| x centerY nextB |	blockLayoutNeeded ifFalse: [^ self].	super fixBlockLayout.	x _ self left + 8.	centerY _ self top + 23.	self nonControlFlowSubmorphs do: [:m |		(m isKindOf: ArgMorph) ifTrue: [m fixArgLayout].		m position: x@(centerY - (m height // 2)).		x _ x + m width + 5].	x _ x + 4.	self width: ((x - self left) max: self hatTopForm width).	(nextB _ self nextBlock) ifNotNil: [		nextB top: self bottom - 4.		nextB fixBlockLayout].! !!HatBlockMorph methodsFor: 'private' stamp: 'jm 3/31/2005 22:03'!hatTopForm	^ ScratchFrameMorph scratchSkin at: #hatBlockTop! !!HatBlockMorph methodsFor: 'private' stamp: 'jm 5/8/2007 11:16'!mapReceiver: oldObj to: newObj	"Used in cloning or importing to make blocks that refererred to the original object new refer to the new copy."	scriptOwner == oldObj ifTrue: [scriptOwner _ newObj].! !!HatBlockMorph methodsFor: 'private' stamp: 'jm 12/10/2005 11:04'!printCodeOn: aStream indent: indent	"Append a human-readable string for this block on the given stream."	indent timesRepeat: [aStream nextPutAll: '    '].	self printHatNameOn: aStream.	self nextBlock ifNotNil: [self nextBlock printCodeOn: aStream indent: indent + 1].	indent timesRepeat: [aStream nextPutAll: '    '].	aStream nextPutAll: 'end'; cr.! !!HatBlockMorph methodsFor: 'private' stamp: 'jm 12/8/2005 19:21'!printHatNameOn: aStream	"Append a human-readable string for this hat block's name to the given stream."	aStream nextPutAll: 'to ', scriptNameMorph contents; cr.! !