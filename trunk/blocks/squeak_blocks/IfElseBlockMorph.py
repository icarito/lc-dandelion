'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 30 April 2008 at 1:48:11 pm'!CommandBlockMorph subclass: #IfElseBlockMorph	instanceVariableNames: 'trueBlock falseBlock nextBlock elseLabel elseBarY topBarBottom blockBottom '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Blocks'!!IfElseBlockMorph commentStamp: 'jm 12/13/2005 20:51' prior: 0!I am an "E" shaped block used for the if-then-else control structure.!!IfElseBlockMorph methodsFor: 'initialization' stamp: 'jm 12/13/2005 20:31'!initialize	super initialize.	self color: (Color r: 1.0 g: 0.581 b: 0.194).! !!IfElseBlockMorph methodsFor: 'drawing' stamp: 'jm 12/14/2005 17:39'!drawBottomBarOn: aCanvas 	self drawInnerBottomY: self bottom - CBlockBracketThickness - 4 on: aCanvas.	self drawBottomEdgeOn: aCanvas.! !!IfElseBlockMorph methodsFor: 'drawing' stamp: 'jm 10/25/2007 19:53'!drawElseBarOn: aCanvas	| left y |	"these are in absolute coordinates"	left _ self left + CBlockBracketThickness - 1.	y _ self top + elseBarY.	self drawInnerBottomY: y on: aCanvas.	y _ y + 2.	aCanvas		fillRectangle: (left@y corner: (self right - 1)@(y + 12))		color: color.	aCanvas		fillRectangle: ((self right - 1)@y corner: self right@(y + 12))		color: shadowColor.	self drawInnerTopY: elseBarY + 14 on: aCanvas.	aCanvas		text: 'else' localized		at: (self left + 4)@(y + 0)		font: LabelFont		color: Color white.! !!IfElseBlockMorph methodsFor: 'drawing' stamp: 'jm 12/14/2005 17:42'!drawInnerBottomY: y on: aCanvas	| left barBottom |	left _ self left + CBlockBracketThickness - 1.	barBottom _ y + (CBlockBracketThickness - 3).	"fill in bottom-left corner"	aCanvas fillRectangle: (left@(y - 2) extent: 1@1) color: color.	aCanvas fillRectangle: (left@(y - 1) extent: 2@1) color: color.	aCanvas fillRectangle: (left@y extent: 3@1) color: color.	aCanvas		fillRectangle: ((left + 3)@y corner: (self right - 2)@(y + 1))		color: highlightColor1.	aCanvas		fillRectangle: (left@(y + 1) corner: (self right - 1)@barBottom)		color: color.	aCanvas		fillRectangle: ((self right - 1)@(y + 2) corner: self right@barBottom)		color: shadowColor.! !!IfElseBlockMorph methodsFor: 'drawing' stamp: 'jm 12/14/2005 17:21'!drawInnerTopY: y on: aCanvas	| left right gapStart gapEnd |	left _ CBlockBracketThickness - 1.	right _ self width - 1.	gapStart _ left + PuzzleInset + 1.	gapEnd _ gapStart + PuzzleWidth.	self drawHLineFrom: left to: (right - 1) y: y color: color on: aCanvas.	self drawHLineFrom: left to: (right - 2) y: y + 1 color: color on: aCanvas.	"fill in upper-left inside corner"	self drawHLineFrom: left to: (left + 2) y: y + 2 color: color on: aCanvas.	self drawHLineFrom: left to: (left + 1) y: y + 3 color: color on: aCanvas.	self drawPoint: (left + 1)@(y + 3) color: shadowColor on: aCanvas.	self drawHLineFrom: gapStart to: gapEnd y: y + 2 color: color on: aCanvas.	self drawHLineFrom: gapStart + 1 to: gapEnd - 1 y: y + 3 color: color on: aCanvas.	self drawHLineFrom: gapStart + 1 to: gapEnd - 1 y: y + 4 color: color on: aCanvas.	self drawHLineFrom: gapStart + 2 to: gapEnd - 2 y: y + 5 color: color on: aCanvas.	self drawHLineFrom: (left + 2) to: gapStart y: y + 2 color: shadowColor on: aCanvas.	self drawHLineFrom: gapEnd to: right - 2 y: y + 2 color: shadowColor on: aCanvas.	self drawHLineFrom: gapStart + 2 to: gapEnd - 2 y: y + 6 color: shadowColor on: aCanvas.	self drawPoint: gapStart@(y + 3) color: shadowColor on: aCanvas.	self drawPoint: gapStart@(y + 4) color: shadowColor on: aCanvas.	self drawPoint: (gapStart + 1)@(y + 5) color: shadowColor on: aCanvas.	self drawPoint: (gapEnd - 1)@(y + 3) color: shadowColor on: aCanvas.	self drawPoint: (gapEnd - 1)@(y + 4) color: shadowColor on: aCanvas.	self drawPoint: (gapEnd - 2)@(y + 5) color: shadowColor on: aCanvas.	self drawPoint: (right - 1)@y color: shadowColor on: aCanvas.	self drawPoint: (right - 2)@(y + 1) color: shadowColor on: aCanvas.! !!IfElseBlockMorph methodsFor: 'drawing' stamp: 'jm 12/14/2005 10:46'!drawOn: aCanvas 	topBarBottom _ self top + self topBarHeight.	blockBottom _ self bottom - 7.	self computeHighlightColors.	self drawTopEdgeOn: aCanvas.	self drawTopBarOn: aCanvas.	self drawVerticalBarOn: aCanvas.	self drawElseBarOn: aCanvas.	self drawBottomBarOn: aCanvas.! !!IfElseBlockMorph methodsFor: 'drawing' stamp: 'jm 12/14/2005 17:27'!drawTopBarOn: aCanvas 	aCanvas		fillRectangle: (self left@(self top + 5) corner: (self right - 1)@topBarBottom)		color: color.	aCanvas		fillRectangle: ((self right - 1)@(self top + 3) corner: self right @topBarBottom)		color: shadowColor.	self drawInnerTopY: topBarBottom - self top on: aCanvas.! !!IfElseBlockMorph methodsFor: 'drawing' stamp: 'jm 12/13/2005 20:31'!drawVerticalBarOn: aCanvas 	| left top barRight |	left _ self left.	barRight _ (left + CBlockBracketThickness) - 1.	top _ self top.		aCanvas		fillRectangle: (left@(top + 5) corner: barRight@blockBottom)		color: color.	aCanvas		fillRectangle: (left@(top + 2) corner: (left + 2)@blockBottom)		color: highlightColor2.	aCanvas		fillRectangle: (barRight@(topBarBottom + 4) corner: (barRight + 1)@blockBottom)		color: shadowColor.! !!IfElseBlockMorph methodsFor: 'object i/o' stamp: 'jm 12/13/2005 20:31'!fieldsVersion	^ 1! !!IfElseBlockMorph methodsFor: 'object i/o' stamp: 'jm 12/13/2005 20:39'!initFieldsFrom: anObjStream version: classVersion	super initFieldsFrom: anObjStream version: classVersion.	self initFieldsNamed: #(		trueBlock		falseBlock		nextBlock	) from: anObjStream.! !!IfElseBlockMorph methodsFor: 'object i/o' stamp: 'jm 12/13/2005 20:40'!storeFieldsOn: anObjStream	super storeFieldsOn: anObjStream.	self storeFieldsNamed: #(		trueBlock		falseBlock		nextBlock	) on: anObjStream.! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 9/1/2006 12:54'!asBlockTuple	"Answer a tuple (Array) describing this block and its arguments."	| blockTuple arg |	blockTuple _ Array new: argMorphs size + 3.	blockTuple at: 1 put: selector.	1 to: argMorphs size do: [:i |		arg _ argMorphs at: i.		(arg isKindOf: ArgMorph)			ifTrue: [blockTuple at: i + 1 put: arg evaluate]			ifFalse: [blockTuple at: i + 1 put: arg asBlockTuple]].	trueBlock		ifNil: [blockTuple at: blockTuple size - 1 put: nil]		ifNotNil: [blockTuple at: blockTuple size - 1 put: trueBlock tupleSequence].	falseBlock		ifNil: [blockTuple at: blockTuple size put: nil]		ifNotNil: [blockTuple at: blockTuple size put: falseBlock tupleSequence].	^ blockTuple! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/14/2005 17:07'!attachBlock: aBlockMorph	"Attach the given block to me. Assume the block has been positioned correctly."	| y |	self addMorph: aBlockMorph.	y _ aBlockMorph top.	y <= (self top + elseBarY) ifTrue: [trueBlock _ aBlockMorph. ^ self].	y <= (self bottom - CBlockBracketThickness) ifTrue: [falseBlock _ aBlockMorph. ^ self].	nextBlock _ aBlockMorph.! !!IfElseBlockMorph methodsFor: 'private' stamp: 'ee 10/17/2007 13:54'!blockAttachPoints: aSet	"Answer a collection of possible attachment points for me. Each entry is an Association mapping a point to the morph to which a dropping command block could be attached."	| result |	result _ #().	self = self topBlock ifTrue: [result _ result copyWith: self topLeft -> self].	(self isKindOf: HatBlockMorph) ifFalse: [		result _ result copyWith: (self topLeft -> self)].	trueBlock		ifNil: [result _ result copyWith: (self topLeft + (12@(self topBarHeight + 7))) -> self]		ifNotNil: [trueBlock blockAttachPoints: aSet].	falseBlock		ifNil: [result _ result copyWith: (self topLeft + (12@(elseBarY + CBlockBracketThickness + 9))) -> self]		ifNotNil: [falseBlock blockAttachPoints: aSet].	nextBlock		ifNil: [result _ result copyWith: self bottomLeft -> self]		ifNotNil: [nextBlock blockAttachPoints: aSet].	aSet addAll: result.! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/14/2005 11:35'!falseBlock: aBlockMorph	"Add the given block as my false nested block sequence. Delete the old nested blocks, if any."	falseBlock ifNotNil: [falseBlock delete].	falseBlock _ aBlockMorph.	aBlockMorph ifNotNil: [self addMorph: aBlockMorph].! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/13/2005 20:36'!falseBlockList	"Answer an array containing the block sequence false-case nested stack."	falseBlock		ifNil: [^ #()]		ifNotNil: [^ falseBlock blockSequence].! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 4/15/2007 20:13'!fixBlockLayout	"Update the positions of my submorphs."	| newH |	blockLayoutNeeded ifFalse: [^ self].	"fix trueBlock, falseBlock, and nextBlock in case they've been removed from me"	(trueBlock notNil and: [trueBlock owner ~~ self]) ifTrue: [trueBlock _ nil].	(falseBlock notNil and: [falseBlock owner ~~ self]) ifTrue: [falseBlock _ nil].	(nextBlock notNil and: [nextBlock owner ~~ self]) ifTrue: [nextBlock _ nil].	super fixBlockLayout.	newH _ self topBarHeight + 3.	trueBlock		ifNil: [newH _ newH + 15]		ifNotNil: [			trueBlock fixBlockLayout.			trueBlock position: self position + (CBlockBracketThickness@newH).			newH _ newH + trueBlock fullBounds height.			trueBlock blockSequence last isStopOrForever ifTrue: [newH _ newH + 4]].	elseBarY _ newH - 4.	newH _ newH + 13.	falseBlock		ifNil: [newH _ newH + 15]		ifNotNil: [			falseBlock fixBlockLayout.			falseBlock position: self position + (CBlockBracketThickness@newH).			newH _ newH + falseBlock fullBounds height.			falseBlock blockSequence last isStopOrForever ifTrue: [newH _ newH + 4]].	newH _ newH + CBlockBracketThickness.	self height: newH.	nextBlock ifNotNil: [nextBlock position: self left@(self bottom - 4)].! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/13/2005 20:31'!litUp: aBoolean	"Overridden to suppress highlighting of control structures. Do nothing."! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/13/2005 20:31'!nextBlock	"Answer the block myself in the block sequence or nil if I am the last block in the sequence. Each block is a submorph of the previous block."	^ nextBlock! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/13/2005 20:31'!nextBlock: aBlockMorph	"Add the given block as the block following me. Delete old nextBlock, if any."	self nextBlock ifNotNil: [self nextBlock delete].	nextBlock _ aBlockMorph.	aBlockMorph ifNotNil: [self addMorph: aBlockMorph].! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 11/29/2006 12:22'!nonControlFlowSubmorphs	"Answer a collection of submorphs minus any blocks that are part of the control flow. For example, command blocks omit their submorph that is the next block in the block sequence, C-blocks omit both their next block and the first block of their nested block list, etc."	^ submorphs select: [:m |		(m ~~ trueBlock) &		(m ~~ falseBlock) &		(m ~~ nextBlock)]! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/13/2005 20:46'!printCodeOn: aStream indent: indent	"Append a human-readable string for this block on the given stream."	indent timesRepeat: [aStream nextPutAll: '    '].	submorphs do: [:m |		(m ~~ trueBlock) & (m ~~ falseBlock) & (m ~~ nextBlock) ifTrue: [			self printCodeSubmorph: m on: aStream.			aStream space]].	aStream cr.	trueBlock ifNotNil: [trueBlock printCodeOn: aStream indent: indent + 1].	indent timesRepeat: [aStream nextPutAll: '    '].	aStream nextPutAll: 'else'; cr.	falseBlock ifNotNil: [falseBlock printCodeOn: aStream indent: indent + 1].	nextBlock ifNotNil: [nextBlock printCodeOn: aStream indent: indent].! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 11/29/2006 12:21'!topBarHeight	"Answer the height of the top bar."	| nonBlockSubmorphs |	nonBlockSubmorphs _ self submorphs select: [:m |		(m isKindOf: BlockMorph) not or: [argMorphs includes: m]].	^ nonBlockSubmorphs inject: CBlockBracketThickness into: [:h :m | h max: (m height + 4)].! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/14/2005 11:34'!trueBlock: aBlockMorph	"Add the given block as my true nested block sequence. Delete the old nested blocks, if any."	trueBlock ifNotNil: [trueBlock delete].	trueBlock _ aBlockMorph.	aBlockMorph ifNotNil: [self addMorph: aBlockMorph].! !!IfElseBlockMorph methodsFor: 'private' stamp: 'jm 12/13/2005 20:36'!trueBlockList	"Answer an array containing the block sequence true-case nested stack."	trueBlock		ifNil: [^ #()]		ifNotNil: [^ trueBlock blockSequence].! !